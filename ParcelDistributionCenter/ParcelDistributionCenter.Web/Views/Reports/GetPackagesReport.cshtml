@using Newtonsoft.Json;
@using ParcelDistributionCenter.Model.Enums;
@model IEnumerable<ParcelDistributionCenter.Model.DTOs.ReportPackageDto>

@{
    ViewData["Title"] = "PackagesReport";

    double averageAddingDurationTime = Math.Round(Model.Average(r => r.AddingDurationInSeconds));
    int bigPackagesCount = Model.Count(r => r.Size == PackageSize.Big);
    int mediumPackagesCount = Model.Count(r => r.Size == PackageSize.Medium);
    int smallPackagesCount = Model.Count(r => r.Size == PackageSize.Small);

    var packageSizeCounts = Model.GroupBy(p => p.Size)
                                 .Select(g => new
                                 {
                                     Size = g.Key.ToString(),
                                     Count = g.Count()
                                 });
    var totalPackages = packageSizeCounts.Sum(p => p.Count);
    var packageSizePercentages = packageSizeCounts.Select(p => new
    {
        Size = p.Size,
        Percentage = Math.Round((double)p.Count / totalPackages * 100)
    });

    var chartData = JsonConvert.SerializeObject(packageSizePercentages);
}

<div style="display: flex;">
    <div style="flex: 1;">
        <div class="summary">
            <h2>Summary</h2>
            <p style="color: teal; font-weight: bold;">Average Package Adding Duration Time: @averageAddingDurationTime s</p>
            <p style="color: darkgoldenrod; font-weight: bold;">Big Packages Count: @bigPackagesCount</p>
            <p style="color: indigo; font-weight: bold;">Medium Packages Count: @mediumPackagesCount</p>
            <p style="color: olive; font-weight: bold;">Small Packages Count: @smallPackagesCount</p>
        </div>
        <table class="table center-table">
            <thead>
                <tr class="center-cell">
                    <th>
                        @Html.DisplayNameFor(model => model.AddingDurationInSeconds)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Size)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.TimeCreated)
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr class="center-cell">
                        <td>
                            @Html.DisplayFor(modelItem => item.AddingDurationInSeconds)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Size)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.TimeCreated)
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div style="flex: 1;">
        <canvas id="packageSizeChart" width="400" height="400"></canvas>
    </div>
</div>

<style>
    .summary {
        background-color: #f5f5f5;
        padding: 10px;
        margin-bottom: 20px;
    }

    .center-table {
        margin: 0 auto;
    }

    .center-cell {
        text-align: center;
        vertical-align: middle;
    }

    .summary h2 {
        font-size: 20px;
        margin-bottom: 10px;
        font-weight: bold;
    }

    .summary p {
        font-size: 16px;
        margin: 5px 0;
    }
</style>

<script src="https://cdn.jsdelivr.net/npm/chart.js@3.5.1"></script>
<script>
    var labels = @Html.Raw(JsonConvert.SerializeObject(packageSizePercentages.Select(p => p.Size)));
    var data = @Html.Raw(JsonConvert.SerializeObject(packageSizePercentages.Select(p => p.Percentage)));

    var ctx = document.getElementById('packageSizeChart').getContext('2d');
    var chart = new Chart(ctx, {
        type: 'pie',
        data: {
            labels: labels,
            datasets: [{
                data: data,
                backgroundColor: [
                    '#FF6384',
                    '#36A2EB',
                    '#FFCE56',
                    '#4BC0C0',
                    '#9966FF',
                    '#FF9F40'
                ]
            }]
        },
        options: {
            responsive: true,
            plugins: {
                tooltip: {
                    callbacks: {
                        label: function (context) {
                            var label = context.label || '';
                            var value = context.raw || '';
                            return label + ': ' + value + '%';
                        }
                    }
                },
                legend: {
                    position: 'right',
                    labels: {
                        boxWidth: 12,
                        padding: 20
                    }
                }
            }
        }
    });
</script>